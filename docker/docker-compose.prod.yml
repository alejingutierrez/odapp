# ODA Platform - Production Environment
# Complete Docker Compose setup for production deployment

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: oda-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-oda_prod}
      POSTGRES_USER: ${POSTGRES_USER:-oda_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - oda-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${POSTGRES_USER:-oda_user} -d ${POSTGRES_DB:-oda_prod}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: oda-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - oda-network
    healthcheck:
      test:
        ['CMD', 'redis-cli', '-a', '${REDIS_PASSWORD}', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  # Search and Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: oda-elasticsearch-prod
    restart: unless-stopped
    environment:
      - node.name=oda-es-node
      - cluster.name=oda-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - 'ES_JAVA_OPTS=-Xms${ES_HEAP_SIZE:-1g} -Xmx${ES_HEAP_SIZE:-1g}'
      - xpack.security.enabled=${ES_SECURITY_ENABLED:-true}
      - xpack.security.enrollment.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '${ELASTICSEARCH_PORT:-9200}:9200'
      - '${ELASTICSEARCH_TRANSPORT_PORT:-9300}:9300'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - oda-network
    healthcheck:
      test:
        ['CMD-SHELL', 'curl -f http://localhost:9200/_cluster/health || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: oda-kibana-prod
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_NAME=kibana
      - SERVER_HOST=0.0.0.0
      - SERVER_PUBLICBASEURL=${KIBANA_PUBLIC_URL}
    ports:
      - '${KIBANA_PORT:-5601}:5601'
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - oda-network
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:5601/api/status || exit 1']
      interval: 30s
      timeout: 10s
      retries: 5

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: oda-rabbitmq-prod
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-oda_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-oda_vhost}
    ports:
      - '${RABBITMQ_PORT:-5672}:5672'
      - '${RABBITMQ_MANAGEMENT_PORT:-15672}:15672'
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - oda-network
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  # Object Storage
  minio:
    image: minio/minio:latest
    container_name: oda-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
    ports:
      - '${MINIO_API_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - minio_data:/data
    networks:
      - oda-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Application Services
  backend:
    build:
      context: ../../
      dockerfile: Dockerfile.backend
      target: production
    container_name: oda-backend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      API_PORT: ${API_PORT:-3001}
      API_HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER:-oda_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-oda_prod}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-oda_user}:${RABBITMQ_PASSWORD}@rabbitmq:5672/${RABBITMQ_VHOST:-oda_vhost}
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET_NAME: ${S3_BUCKET_NAME:-oda-assets}
      FRONTEND_URL: ${FRONTEND_URL}
      CORS_ORIGINS: ${CORS_ORIGINS}
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      SESSION_SECRET: ${SESSION_SECRET}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES:-image/jpeg,image/png,image/gif,application/pdf}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      minio:
        condition: service_healthy
    ports:
      - '${API_PORT:-3001}:3001'
    networks:
      - oda-network

  frontend:
    build:
      context: ../../
      dockerfile: Dockerfile.frontend
      target: production
      args:
        REACT_APP_API_URL: ${REACT_APP_API_URL}
        REACT_APP_WS_URL: ${REACT_APP_WS_URL}
    container_name: oda-frontend-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
    depends_on:
      - backend
    ports:
      - '${FRONTEND_HTTP_PORT:-80}:80'
      - '${FRONTEND_HTTPS_PORT:-443}:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - oda-network

  storybook:
    build:
      context: ../../
      dockerfile: Dockerfile.storybook
      target: production
    container_name: oda-storybook-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
    ports:
      - '${STORYBOOK_PORT:-6006}:80'
    networks:
      - oda-network
    profiles:
      - storybook

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local

networks:
  oda-network:
    driver: bridge
